Here's a breakdown of the differences between contiguous and linked lists based on the provided context:

*   **Contiguously Allocated Lists:** In this type of list, all the records are stored in a single, continuous block of memory. This means all the data for ‘n’ records requires ‘n * x’ bytes, where ‘x’ is the size of each record.

*   **Linked Lists:** Linked lists use linked structures. Each record needs ‘x’ bytes plus additional space for one or two memory addresses. Individual records are linked together using memory addresses, creating a chain. In a linked list, each node points to the next element in the list (except the last one, which points to nil/null).
------------------------
Linked lists are fast for random insertions and contiguous lists are fast for random access.
------------------------
The imbalance case created with inserting 23 is an LR imbalance. The node with 30 has a left child of 25 and a right child of 35. The left subtree (25) is heavier than the right subtree (35), creating an imbalance.
------------------------
Based on the provided context, a B-tree is a better choice for indexing a large dataset due to its design that exploits locality and minimizes disk access. Here’s a breakdown of why, drawing from the information:

*   **Locality of Reference:** B-trees are designed to put multiple elements into each tree node. This maximizes the chance that when you access a node, the entire node (and therefore many related data items) will be loaded into the cache. This is crucial when storing data on disk, where accessing a disk location takes approximately 5ms.
*   **Reduced Disk I/O:** Because of the high branching factor (much larger than 2), B-trees require far fewer disk reads to navigate to the data compared to an AVL tree. This dramatically improves performance when dealing with large datasets stored on disk.
*   **Constant Time Operations:** The context mentions that rotations in AVL trees take a constant amount of time (Θ(1)), but this doesn't address the fundamental advantage of B-trees in terms of minimizing disk I/O.

In contrast, AVL trees are primarily designed for in-memory data structures and don't inherently address the locality issues associated with disk-based storage.
------------------------
Based on the provided context, disk-based indexing is the mechanism to support faster searching by `specialVal` than a linear scan. Data cannot be stored on disk sorted by both `id` and `specialVal` at the same time, necessitating a linear scan.
------------------------
A transaction is a sequence of one or more of the CRUD operations performed as a single, logical unit of work. Either the entire sequence succeeds (COMMIT), or the entire sequence fails (ROLLBACK or ABORT). It helps ensure data integrity, error recovery, concurrency control, and simplified error handling.
------------------------
The four components of ACID compliant transactions are: Atomicity, Consistency, Durability, and Isolation.
------------------------
The CAP Theorem states that it is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees: Consistency, Availability, or tolerance to failure. When applied to a single-node MongoDB instance, the CAP Theorem doesn't make sense because a single node inherently provides all three guarantees: consistency, availability, and partition tolerance.
------------------------
Conventional wisdom suggests scaling vertically – increasing the power of a single system – until demands for high availability necessitate scaling out with distributed computing models. Horizontal scaling, on the other hand, involves distributing data and processing across multiple computers, appearing as one system to the user.
------------------------
Based on the provided context, key-value stores are well-suited for a feature store due to their simplicity and speed. They lend themselves to simple CRUD (Create, Read, Update, Delete) operations and API creation, which are fundamental to feature retrieval. The context highlights their focus on speed and scalability, making them suitable for serving features efficiently.
------------------------
I don't know.
------------------------
I don't know.
------------------------
BSON (Binary JSON) allows you to work with types not allowed in regular JSON (e.g. date, binary data) and keeps space overhead to a minimum.
------------------------
```javascript
db.movies.find({
  year: { $gte: 2010, $lte: 2015 },
  genres: "Suspense"
})
```
------------------------
The $nin operator is like SELECT * FROM movies WHERE rated in ( `` PG '' , `` PG-13 '' ) db.movies.find ( { rated : { $ in : [ `` PG '' , `` PG-13 '' ] } } ))