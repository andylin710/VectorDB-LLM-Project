Here's a breakdown of the differences between contiguous and linked lists based on the provided context:

*   **Contiguously Allocated Lists:** In this type of list, all the records are stored in a single, continuous block of memory. This means all the data for ‘n’ records requires ‘n * x’ bytes, where ‘x’ is the size of each record.

*   **Linked Lists:** Linked lists use linked structures. Each record needs ‘x’ bytes plus additional space for one or two memory addresses. Individual records are linked together using memory addresses, creating a chain. In a linked list, each node points to the next element in the list (except the last one, which points to nil/null).
------------------------
Linked lists are fast for random insertions and contiguous lists are fast for random access.
------------------------
The imbalance case created with inserting 23 is a right-heavy imbalance. Specifically, after inserting 23, the tree becomes:

		 30
	    / \
	   25  35
	  /
 23	

The right subtree of 30 (containing 25 and 35) is taller than the left subtree (containing only 23).
------------------------
The context highlights that B-trees are better for indexing large datasets due to their design that exploits locality. B-trees have a high branching factor, ensuring that few disk reads are needed to navigate and store data, which is crucial when accessing data on disk. This contrasts with AVL trees, which require constant restructuring after each operation to maintain balance, making them less efficient for large datasets where minimizing disk I/O is paramount.
------------------------
Based on the provided context, disk-based indexing is the mechanism to support faster searching by `specialVal` than a linear scan. Data cannot be stored on disk sorted by both `id` and `specialVal` at the same time, necessitating a linear scan.
------------------------
A transaction is a sequence of one or more of the CRUD operations performed as a single, logical unit of work. Either the entire sequence succeeds (COMMIT), or the entire sequence fails (ROLLBACK or ABORT). It helps ensure data integrity, error recovery, concurrency control, and simplified error handling.
------------------------
The four components of ACID compliant transactions are: Atomicity, Consistency, Durability, and Isolation.
------------------------
The CAP Theorem states that it is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees: Consistency, Availability, or tolerance to failure. When applied to a single-node MongoDB instance, the CAP Theorem doesn't make sense because a single node inherently provides all three guarantees: consistency, availability, and partition tolerance.
------------------------
Conventional wisdom suggests scaling vertically – increasing the power of a single system – until demands for high availability necessitate scaling out with distributed computing models. Horizontal scaling, on the other hand, involves distributing data and processing across multiple computers, appearing as one system to the user.
------------------------
Based on the provided context, key-value stores are well-suited for a feature store due to their simplicity and speed. They lend themselves to simple CRUD (Create, Read, Update, Delete) operations and API creation, which are fundamental to a feature store’s functionality. The context highlights their focus on speed and scalability, making them a viable option for storing and retrieving features.
------------------------
I don't know.
------------------------
I don't know.
------------------------
BSON is a binary-encoded serialization of JSON-like documents, which allows you to work with types not allowed in regular JSON (e.g. date, binary data). It keeps space overhead to a minimum and is easily traversed, which is vitally important to a document DB.
------------------------
```javascript
db.movies.find({
  year: { $gte: 2010, $lte: 2015 },
  genres: "Suspense"
})
```
------------------------
The $nin operator is like SELECT * FROM movies WHERE rated in ( `` PG '' , `` PG-13 '' ) db.movies.find ( { rated : { $ in : [ `` PG '' , `` PG-13 '' ] } } ))